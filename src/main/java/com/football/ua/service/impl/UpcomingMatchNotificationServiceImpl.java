package com.football.ua.service.impl;

import com.football.ua.model.entity.MatchEntity;
import com.football.ua.repo.MatchRepository;
import com.football.ua.service.NotificationService;
import com.football.ua.service.UpcomingMatchNotificationService;
import jakarta.annotation.PostConstruct;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.Duration;
import java.time.LocalDateTime;
import java.util.List;
import java.util.stream.Collectors;

@Service
@Transactional(readOnly = true)
public class UpcomingMatchNotificationServiceImpl implements UpcomingMatchNotificationService {
    
    private final MatchRepository matchRepository;
    private final NotificationService notificationService;
    
    public UpcomingMatchNotificationServiceImpl(
            MatchRepository matchRepository,
            NotificationService notificationService) {
        this.matchRepository = matchRepository;
        this.notificationService = notificationService;
    }
    
    @PostConstruct
    public void init() {
        checkAndNotifyUpcomingMatches();
    }
    

    @Scheduled(fixedRate = 1800000)
    public void checkAndNotifyUpcomingMatches() {
        List<UpcomingMatchNotification> upcomingMatches = getUpcomingMatches();
        
        if (!upcomingMatches.isEmpty()) {
            notificationService.notifyAll(
                "UPCOMING_MATCHES", 
                String.format("–ó–Ω–∞–π–¥–µ–Ω–æ %d –º–∞—Ç—á—ñ(—ñ–≤) –Ω–∞ –Ω–∞–π–±–ª–∏–∂—á—ñ 2 –¥–Ω—ñ", upcomingMatches.size())
            );
        }
    }
    
    @Override
    public List<UpcomingMatchNotification> getUpcomingMatches() {
        LocalDateTime now = LocalDateTime.now();
        LocalDateTime twoDaysLater = now.plusHours(48);
        
        System.out.println("üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –º–∞–π–±—É—Ç–Ω—ñ—Ö –º–∞—Ç—á—ñ–≤:");
        System.out.println("   –ó–∞—Ä–∞–∑: " + now);
        System.out.println("   –î–æ: " + twoDaysLater);
        
        List<MatchEntity> allMatches = matchRepository.findAll();
        System.out.println("   –í—Å—å–æ–≥–æ –º–∞—Ç—á—ñ–≤ –≤ –±–∞–∑—ñ: " + allMatches.size());
        
        List<UpcomingMatchNotification> result = allMatches.stream()
            .filter(match -> {
                LocalDateTime kickoff = match.getKickoffAt();
                boolean isAfterNow = kickoff.isAfter(now);
                boolean isBeforeTwoDays = kickoff.isBefore(twoDaysLater);
                boolean include = isAfterNow && isBeforeTwoDays;
                
                System.out.println("   –ú–∞—Ç—á ID=" + match.getId() + " –æ " + kickoff + 
                                 " | –ø—ñ—Å–ª—è now: " + isAfterNow + 
                                 " | –¥–æ +48h: " + isBeforeTwoDays +
                                 " | –í–ö–õ–Æ–ß–ò–¢–ò: " + include);
                return include;
            })
            .map(this::toNotification)
            .collect(Collectors.toList());
        
        System.out.println("   –†–µ–∑—É–ª—å—Ç–∞—Ç: –∑–Ω–∞–π–¥–µ–Ω–æ " + result.size() + " –º–∞—Ç—á—ñ(—ñ–≤)");
        return result;
    }
    
    private UpcomingMatchNotification toNotification(MatchEntity match) {
        LocalDateTime now = LocalDateTime.now();
        long hoursUntil = Duration.between(now, match.getKickoffAt()).toHours();
        
        String homeTeam = "–ö–æ–º–∞–Ω–¥–∞ 1";
        String awayTeam = "–ö–æ–º–∞–Ω–¥–∞ 2";
        
        try {
            if (match.getTeams() != null) {
                int teamCount = match.getTeams().size();
                if (teamCount > 0) {
                    List<String> teamNames = match.getTeams().stream()
                        .map(team -> team.getName())
                        .limit(2)
                        .toList();
                    
                    if (teamNames.size() > 0) homeTeam = teamNames.get(0);
                    if (teamNames.size() > 1) awayTeam = teamNames.get(1);
                }
            }
        } catch (Exception e) {
            System.out.println("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥ –¥–ª—è –º–∞—Ç—á—É ID=" + match.getId() + ": " + e.getMessage());
        }
        
        return new UpcomingMatchNotification(
            match.getId(),
            homeTeam,
            awayTeam,
            match.getKickoffAt(),
            hoursUntil
        );
    }
}

